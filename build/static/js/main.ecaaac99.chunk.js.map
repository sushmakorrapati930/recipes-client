{"version":3,"sources":["Components/Forms/FormAddEdit.js","Components/Modals/Modal.js","Components/Tables/DataTable.js","App.js","serviceWorker.js","index.js"],"names":["AddEditForm","state","id","recipeName","ingredients","instructions","servingSize","category","notes","dateModified","onChange","e","_this","setState","Object","defineProperty","target","name","value","submitFormAdd","preventDefault","fetch","method","headers","Content-Type","body","JSON","stringify","then","response","json","item","Array","isArray","props","addItemToState","toggle","console","log","catch","err","submitFormEdit","updateState","this","_this$props$item","react_default","a","createElement","Form","onSubmit","FormGroup","Label","for","Input","type","options","Button","React","Component","ModalForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","prevState","modal","closeBtn","className","onClick","label","buttonLabel","button","title","color","style","float","marginRight","Modal","isOpen","ModalHeader","close","ModalBody","FormAddEdit","DataTable","deleteItem","window","confirm","deleteItemFromState","_this2","items","map","key","scope","width","Modals_Modal","Table","responsive","hover","App","concat","toConsumableArray","itemIndex","findIndex","data","newArray","slice","updatedItems","filter","getItems","Container","Row","Col","margin","Tables_DataTable","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ecaaac99.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nclass AddEditForm extends React.Component {\n  state = {\n    id: 0,\n    recipeName: '',\n    ingredients: '',\n    instructions: '',\n    servingSize: '',\n    category: '',\n    notes: '',\n    dateModified: '',\n\n  }\n\n  onChange = e => {\n    this.setState({[e.target.name]: e.target.value})\n  }\n\n  submitFormAdd = e => {\n    e.preventDefault()\n    fetch('http://localhost:3001/api/recipes', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        recipeName: this.state.recipeName,\n        ingredients: this.state.ingredients,\n        instructions: this.state.instructions,\n        servingSize: this.state.servingSize,\n        category: this.state.category,\n        notes: this.state.notes\n      })\n    })\n      .then(response => response.json())\n      .then(item => {\n        if(Array.isArray(item)) {\n          this.props.addItemToState(item[0])\n          this.props.toggle()\n        } else {\n          console.log('failure')\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  submitFormEdit = e => {\n    e.preventDefault()\n    fetch('http://localhost:3000/recipes', {\n      method: 'put',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        recipeName: this.state.recipeName,\n        ingredients: this.state.ingredients,\n        instructions: this.state.instructions,\n        servingSize: this.state.servingSize,\n        category: this.state.category,\n        notes: this.state.notes\n\n      })\n    })\n      .then(response => response.json())\n      .then(item => {\n        if(Array.isArray(item)) {\n          // console.log(item[0])\n          this.props.updateState(item[0])\n          this.props.toggle()\n        } else {\n          console.log('failure')\n        }\n      })\n      .catch(err => console.log(err))\n  }\n\n  componentDidMount(){\n    // if item exists, populate the state with proper data\n    if(this.props.item){\n      const { id, recipeName, ingredients, instructions, servingSize, category, notes,dateModified } = this.props.item\n      this.setState({ recipeName, ingredients, instructions, servingSize, category, notes,dateModified })\n    }\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.props.item ? this.submitFormEdit : this.submitFormAdd}>\n        <FormGroup>\n          <Label for=\"recipe name\">Recipe Name</Label>\n          <Input type=\"text\" name=\"recipeName\" id=\"recipeName\" onChange={this.onChange} value={this.state.recipeName === null ? '' : this.state.recipeName} />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"ingredients\">Ingredients</Label>\n          <Input type=\"textarea\" name=\"ingredients\" id=\"ingredients\" onChange={this.onChange} value={this.state.ingredients === null ? '' : this.state.ingredients} />\n        </FormGroup>\n        <FormGroup>\n           <Label for=\"instructions\">Instructions</Label>\n          <Input type=\"textarea\"  name=\"instructions\" id=\"instructions\" onChange={this.onChange} value={this.state.instructions === null ? '' : this.state.instructions}  />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"servingSize\">Serving Size</Label>\n          <Input type=\"text\" name=\"servingSize\" id=\"servingSize\" onChange={this.onChange} value={this.state.servingSize === null ? '' : this.state.servingSize}   />\n        </FormGroup>\n        <FormGroup>\n          <Label for=\"category\">Category</Label>\n          <Input type=\"select\"   onChange={this.onChange} value={this.state.category === null ? '' : this.state.category}  options={['B', 'C']}/>\n         </FormGroup>\n        <FormGroup>\n          <Label for=\"notes\">Notes</Label>\n          <Input type=\"textarea\" name=\"notes\" id=\"notes\" onChange={this.onChange} value={this.state.notes}  />\n        </FormGroup>\n        <Button>Submit</Button>\n      </Form>\n    );\n  }\n}\n\nexport default AddEditForm","import React, { Component } from 'react'\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap'\nimport AddEditForm from '../Forms/FormAddEdit'\n\nclass ModalForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      modal: false\n    }\n  }\n\n  toggle = () => {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }))\n  }\n\n  render() {\n      const closeBtn = <button className=\"close\" onClick={this.toggle}>&times;</button>\n\n      const label = this.props.buttonLabel\n\n      let button = ''\n      let title = ''\n\n      if(label === 'Edit'){\n        button = <Button\n                  color=\"warning\"\n                  onClick={this.toggle}\n                  style={{float: \"left\", marginRight:\"10px\"}}>{label}\n                </Button>\n        title = 'Edit Item'\n      } else {\n        button = <Button\n                  color=\"success\"\n                  onClick={this.toggle}\n                  style={{float: \"left\", marginRight:\"10px\"}}>{label}\n                </Button>\n        title = 'Add New Item'\n      }\n\n\n      return (\n      <div>\n        {button}\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n          <ModalHeader toggle={this.toggle} close={closeBtn}>{title}</ModalHeader>\n          <ModalBody>\n            <AddEditForm\n              addItemToState={this.props.addItemToState}\n              updateState={this.props.updateState}\n              toggle={this.toggle}\n              item={this.props.item} />\n          </ModalBody>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default ModalForm","import React, { Component } from 'react'\nimport { Table, Button } from 'reactstrap';\nimport ModalForm from '../Modals/Modal'\n\nclass DataTable extends Component {\n\n  deleteItem = id => {\n    let confirmDelete = window.confirm('Delete item forever?')\n    if(confirmDelete){\n      fetch('http://localhost:3001/api/recipes', {\n      method: 'delete',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        id\n      })\n    })\n      .then(response => response.json())\n      .then(item => {\n        this.props.deleteItemFromState(id)\n      })\n      .catch(err => console.log(err))\n    }\n\n  }\n\n  render() {\n\n    const items = this.props.items.map(item => {\n      return (\n        <tr key={item.id}>\n          <th scope=\"row\">{item.id}</th>\n          <td>{item.recipeName}</td>\n          <td>{item.ingredients}</td>\n          <td>{item.instructions}</td>\n          <td>{item.servingSize}</td>\n          <td>{item.category}</td>\n          <td>{item.notes\n          \n          }</td>\n          <td>\n            <div style={{width:\"110px\"}}>\n              <ModalForm buttonLabel=\"Edit\" item={item} updateState={this.props.updateState}/>\n              {' '}\n              <Button color=\"danger\" onClick={() => this.deleteItem(item.id)}>Del</Button>\n            </div>\n          </td>\n        </tr>\n        )\n      })\n\n    return (\n      <Table responsive hover>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Recipe Name</th>\n            <th>Ingredients</th>\n            <th>Instructions</th>\n            <th>Serving Size</th>\n            <th>Category</th>\n            <th>Notes</th>\n            <th>Date Added</th>\n            <th>Date Modified</th>\n          </tr>\n        </thead>\n        <tbody>\n          {items}\n        </tbody>\n      </Table>\n    )\n  }\n}\n\nexport default DataTable","import React, { Component } from 'react'\nimport { Container, Row, Col } from 'reactstrap'\nimport ModalForm from './Components/Modals/Modal'\nimport DataTable from './Components/Tables/DataTable'\n\n\nclass App extends Component {\n  state = {\n    items: []\n  }\n\n  getItems(){\n    fetch('http://localhost:3000/crud')\n      .then(response => response.json())\n      .then(items => this.setState({items}))\n      .catch(err => console.log(err))\n  }\n\n  addItemToState = (item) => {\n    this.setState(prevState => ({\n      items: [...prevState.items, item]\n    }))\n  }\n\n  updateState = (item) => {\n    const itemIndex = this.state.items.findIndex(data => data.id === item.id)\n    const newArray = [\n    // destructure all items from beginning to the indexed item\n      ...this.state.items.slice(0, itemIndex),\n    // add the updated item to the array\n      item,\n    // add the rest of the items to the array from the index after the replaced item\n      ...this.state.items.slice(itemIndex + 1)\n    ]\n    this.setState({ items: newArray })\n  }\n\n  deleteItemFromState = (id) => {\n    const updatedItems = this.state.items.filter(item => item.id !== id)\n    this.setState({ items: updatedItems })\n  }\n\n  componentDidMount(){\n    this.getItems()\n  }\n\n  render() {\n    return (\n      <Container className=\"App\">\n        <Row>\n          <Col>\n            <h1 style={{margin: \"20px 0\"}}>Recipes App</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <DataTable items={this.state.items} updateState={this.updateState} deleteItemFromState={this.deleteItemFromState} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n             <ModalForm buttonLabel=\"Add Item\" addItemToState={this.addItemToState}/>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}